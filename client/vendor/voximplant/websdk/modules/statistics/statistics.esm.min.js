import{SDK as e}from"@voximplant/websdk";const t={major:5,minor:0,rev:0},a=function(e){},o=function(e){return{dependencies:{},name:"statistics",setup:a,version:t}};const i={process:function(e){return{connection:{timestamp:0,availableOutgoingBitrate:0,bytesReceived:0,bytesSent:0,rtt:0,localPort:0,localProtocol:"udp",localType:"relay",remotePort:0,remoteProtocol:"tcp",remoteType:"relay"},inbound:{},outbound:{}}},name:"rfc"};const s={calculateBitrate:function(e,t,a,o){return(e-t)/(a-o)*8e3},formatStats:function(e){const t=e,a=new Map;return t.forEach((e=>a.set(e.id,e))),[t,a]}};const r={process:function(e,t){const[a,o]=s.formatStats(e),i={},r={};let n={};return a.forEach((e=>{switch(e.type){case"outbound-rtp":{const t=o.get(e.remoteId),a=e.ssrc,i=t.packetsLost/(t.packetsLost+t.packetsReceived),s={kind:e.kind,bytesSent:e.bytesSent,packetsSent:e.packetsSent,jitter:0,rtt:t.roundTripTime||0,packetsLost:t.packetsLost,loss:i,timestamp:e.timestamp,bitrate:0};"video"===e.kind&&(s.framesPerSecond=e.framerateMean,s.bitrate=e.bitrateMean,s.firCount=e.firCount,s.pliCount=e.pliCount,s.nackCount=e.nackCount),r[a]=[s];break}case"inbound-rtp":{const a=e.ssrc,o=null==t?void 0:t.inbound[a];let r=0;switch(o&&(r=s.calculateBitrate(e.bytesReceived,o.bytesReceived,e.timestamp,o.timestamp)),i[a]={timestamp:e.timestamp,kind:e.kind,bytesReceived:e.bytesReceived||0,packetsReceived:e.packetsReceived||0,packetsLost:e.packetsLost||0,loss:e.packetsLost/(e.packetsReceived+e.packetsLost),jitter:e.jitter||0,bitrate:r},e.kind){case"video":i[a]=Object.assign(Object.assign({},i[a]),{framesDecoded:e.framesDecoded||0,framesPerSecond:e.framerateMean,bitrate:e.bitrateMean})}break}case"candidate-pair":{if("succeeded"!==e.state||!e.nominated)return;const t=o.get(e.remoteCandidateId),a=o.get(e.localCandidateId);if(!t||!a)return;const i=t.candidateType,s=t.ip||t.address,r=t.protocol,c=t.port,d=a.candidateType,l=a.ip||a.address,m=a.protocol,u=a.port,{bytesSent:p,bytesReceived:v,timestamp:f}=e;n={timestamp:f,remoteType:i,remoteIp:s,remoteProtocol:r,remotePort:c,localType:d,localIp:l,localProtocol:m,localPort:u,bytesSent:p,bytesReceived:v};break}}})),{connection:n,outbound:r,inbound:i}},name:"gecko"};const n={process:function(e,t){const[a,o]=s.formatStats(e),i={},r={};let n={};return a.forEach((e=>{switch(e.type){case"outbound-rtp":{const a=o.get(e.remoteId),i=o.get(e.codecId),n=o.get(e.trackId),c=o.get(e.mediaSourceId);console.error(n,e,e.mediaSourceId,c);const d=n.trackIdentifier,l=e.rid?null==t?void 0:t.outbound[d].find((t=>t.rid===e.rid)):null==t?void 0:t.outbound[d][0];let m=0;l&&(m=s.calculateBitrate(e.bytesSent,l.bytesSent,e.timestamp,l.timestamp));const u={bytesSent:e.bytesSent,packetsSent:e.packetsSent,rid:e.rid,jitter:0,rtt:0,totalRtt:0,packetsLost:0,loss:0,codec:i.mimeType,pt:i.payloadType,timestamp:e.timestamp,bitrate:m};if(a){u.jitter=a.jitter,u.rtt=a.roundTripTime,u.packetsLost=a.packetsLost;const t=a.packetsLost||0;u.loss=t/(e.packetsSent+t)}switch(e.kind){case"audio":u.kind="audio";break;case"video":{const{frameWidth:t,frameHeight:a}=n;u.kind="video",u.baseWidth=t,u.baseHeight=a,u.width=e.frameWidth||0,u.height=e.frameHeight||0,u.framesPerSecond=e.framesPerSecond||0,u.qualityLimitationReason=e.qualityLimitationReason,u.qualityLimitationResolutionChanges=e.qualityLimitationResolutionChanges,u.firCount=e.firCount,u.pliCount=e.pliCount,u.nackCount=e.nackCount,u.qpSum=e.qpSum,u.framesEncoded=e.framesEncoded,u.keyFramesEncoded=e.keyFramesEncoded;break}}r[d]||(r[d]=[]),r[d].push(u);break}case"inbound-rtp":{const a=o.get(e.trackId);if(!a)return;const r=a.trackIdentifier,n=null==t?void 0:t.inbound[r];let c=0;switch(n&&(c=s.calculateBitrate(e.bytesReceived,n.bytesReceived,e.timestamp,n.timestamp)),i[r]={timestamp:e.timestamp,kind:e.kind,bytesReceived:e.bytesReceived||0,packetsReceived:e.packetsReceived||0,packetsLost:e.packetsLost||0,loss:e.packetsLost/(e.packetsReceived+e.packetsLost),jitter:0,bitrate:c},e.kind){case"audio":{const{audioLevel:t}=a;i[r]=Object.assign(Object.assign({},i[r]),{jitter:e.jitter,audioLevel:t,totalAudioEnergy:e.totalAudioEnergy||0,totalSamplesReceived:e.totalSamplesReceived||0,totalSamplesDuration:e.totalSamplesDuration||0,insertedSamplesForDeceleration:e.insertedSamplesForDeceleration||0,silentConcealedSamples:e.silentConcealedSamples||0});break}case"video":{let t=0;if(n&&n.framesReceived){const a=n.framesReceived||e.framesReceived;t=(e.framesReceived-a)/(e.timestamp-n.timestamp)*1e3|0}const{freezeCount:o,pauseCount:s,totalFramesDuration:c,totalFreezesDuration:d,totalPausesDuration:l}=a;i[r]=Object.assign(Object.assign({},i[r]),{height:e.frameHeight||0,width:e.frameWidth||0,framesReceived:e.framesReceived||0,framesDecoded:e.framesDecoded||0,freezeCount:o,pauseCount:s,totalFramesDuration:c,totalFreezesDuration:d,totalPausesDuration:l,framesPerSecond:t});break}}break}case"candidate-pair":{if("succeeded"!==e.state||!e.nominated)return;const t=o.get(e.remoteCandidateId),a=o.get(e.localCandidateId);if(!t||!a)return;const i=t.candidateType,s=t.protocol,r=t.port,c=a.candidateType,d=a.protocol,l=a.port,m=e.totalRoundTripTime,u=e.currentRoundTripTime,{bytesSent:p,bytesReceived:v,availableOutgoingBitrate:f,timestamp:b}=e;n={timestamp:b,remoteType:i,remoteProtocol:s,remotePort:r,localType:c,localProtocol:d,localPort:l,bytesSent:p,bytesReceived:v,availableOutgoingBitrate:f,rtt:m,currentRtt:u};break}}})),{connection:n,outbound:r,inbound:i}},name:"webkit"};const c={process:function(e,t){const[a,o]=s.formatStats(e),i={},r={};let n={};return a.forEach((e=>{switch(e.type){case"outbound-rtp":{const a=o.get(e.remoteId),i=o.get(e.codecId),n=o.get(e.trackId),c=o.get(n.mediaSourceId),d=c.trackIdentifier,l=e.rid?null==t?void 0:t.outbound[d].find((t=>t.rid===e.rid)):null==t?void 0:t.outbound[d][0];let m=0;l&&(m=s.calculateBitrate(e.bytesSent,l.bytesSent,e.timestamp,l.timestamp));const u={bytesSent:e.bytesSent,packetsSent:e.packetsSent,rid:e.rid,jitter:0,rtt:0,totalRtt:0,packetsLost:0,loss:0,codec:i.mimeType,pt:i.payloadType,timestamp:e.timestamp,bitrate:m};switch(a&&(u.jitter=a.jitter,u.rtt=a.roundTripTime,u.totalRtt=a.totalRoundTripTime||a.roundTripTime,u.packetsLost=a.packetsLost,u.loss=a.packetsLost/(e.packetsSent+a.packetsLost)),e.kind){case"audio":{const e=c;u.kind="audio",u.audioLevel=e.audioLevel||0,u.totalAudioEnergy=e.totalAudioEnergy||0;break}case"video":{const t=c;u.kind="video",u.baseWidth=t.width,u.baseHeight=t.height,u.width=e.frameWidth||0,u.height=e.frameHeight||0,u.framesPerSecond=e.framesPerSecond||0,u.baseFramesPerSecond=t.framesPerSecond,u.qualityLimitationReason=e.qualityLimitationReason,u.qualityLimitationResolutionChanges=e.qualityLimitationResolutionChanges,u.firCount=e.firCount,u.pliCount=e.pliCount,u.nackCount=e.nackCount,u.qpSum=e.qpSum,u.framesEncoded=e.framesEncoded,u.keyFramesEncoded=e.keyFramesEncoded;break}}r[d]||(r[d]=[]),r[d].push(u);break}case"inbound-rtp":{const a=o.get(e.trackId);if(!a)return;const r=a.trackIdentifier,n=null==t?void 0:t.inbound[r];let c=0;switch(n&&(c=s.calculateBitrate(e.bytesReceived,n.bytesReceived,e.timestamp,n.timestamp)),i[r]={timestamp:e.timestamp,kind:a.kind,bytesReceived:e.bytesReceived||0,packetsReceived:e.packetsReceived||0,packetsLost:e.packetsLost||0,loss:e.packetsLost/(e.packetsReceived+e.packetsLost),jitter:e.jitter||0,bitrate:c},a.kind){case"audio":i[r]=Object.assign(Object.assign({},i[r]),{audioLevel:a.audioLevel||0,totalAudioEnergy:a.totalAudioEnergy||0,totalSamplesReceived:a.totalSamplesReceived||0,totalSamplesDuration:a.totalSamplesDuration||0,insertedSamplesForDeceleration:a.insertedSamplesForDeceleration||0,silentConcealedSamples:a.silentConcealedSamples||0});break;case"video":{let t=0;if(n&&n.framesReceived){const o=n.framesReceived||a.framesReceived;t=(a.framesReceived-o)/(e.timestamp-n.timestamp)*1e3|0}i[r]=Object.assign(Object.assign({},i[r]),{height:a.frameHeight||0,width:a.frameWidth||0,framesReceived:a.framesReceived||0,framesDecoded:a.framesDecoded||0,framesDropped:a.framesDropped||0,framesPerSecond:t});break}}break}case"candidate-pair":{if("succeeded"!==e.state||!e.nominated)return;const t=o.get(e.remoteCandidateId),a=o.get(e.localCandidateId);if(!t||!a)return;const i=t.candidateType,s=t.ip||t.address,r=t.protocol,c=t.port,d=a.candidateType,l=a.ip||a.address,m=a.protocol,u=a.port,p=e.totalRoundTripTime,v=e.currentRoundTripTime,{bytesSent:f,bytesReceived:b,availableOutgoingBitrate:k,timestamp:y}=e;n={timestamp:y,remoteType:i,remoteIp:s,remoteProtocol:r,remotePort:c,localType:d,localIp:l,localProtocol:m,localPort:u,bytesSent:f,bytesReceived:b,availableOutgoingBitrate:k,rtt:p,currentRtt:v};break}}})),{connection:n,outbound:r,inbound:i}},name:"blink"};function d(e){return void 0!==e.address&&void 0!==e.isRemote||void 0!==e.ip&&void 0!==e.isRemote}function l(e,t=!1){let a=!0;return e.forEach((e=>{if(a){switch(e.type){case"candidate-pair":a=void 0!==(o=e).lastPacketReceivedTimestamp&&void 0!==o.lastPacketSentTimestamp;break;case"inbound-rtp":a=function(e){return console.error(e),"video"!==e.kind||void 0!==e.discardedPackets&&void 0!==e.bitrateMean&&void 0!==e.bitrateStdDev&&void 0!==e.framerateMean&&void 0!==e.framerateStdDev&&void 0!==e.framesDecoded}(e)}t&&console.error("After "+e.type,a)}var o})),t&&console.error("Gecko detection result is:",a),a}function m(e){return void 0!==e.deleted}const u=new Set,p=new Map;let v=!1,f=1e3;function b(e){return function(e,t=!1){let a=!0,o=!1;return e.forEach((e=>{if(a){switch(e.type){case"peer-connection":o=!0;break;case"media-source":a="audio"===(i=e).kind?void 0!==i.audioLevel&&void 0!==i.totalAudioEnergy&&void 0!==i.totalSamplesDuration:"video"===i.kind&&void 0!==i.width&&void 0!==i.height&&void 0!==i.framesPerSecond;break;case"local-candidate":case"remote-candidate":a=d(e);break;case"transport":a=function(e){return void 0!==e.packetsSent&&void 0!==e.packetsReceived}(e);break;case"inbound-rtp":a=function(e){return"audio"===e.kind||"video"===e.kind&&void 0!==e.decoderImplementation}(e);break;case"outbound-rtp":a=function(e){return"audio"===e.kind||"video"===e.kind&&void 0!==e.qualityLimitationReason&&void 0!==e.encoderImplementation}(e);break;case"track":a=function(e){return void 0!==e.kind}(e)}t&&console.error("After "+e.type,a)}var i})),o||(a=!1),t&&console.error("Blink detection result is:",a),a}(e,false)?c:function(e,t=!1){let a=!0,o=!1;return e.forEach((e=>{if(a){switch(e.type){case"peer-connection":o=!0;break;case"local-candidate":case"remote-candidate":a=m(e);break;case"track":a=function(e){if(e.framesReceived){const t=e;return void 0!==t.freezeCount&&void 0!==t.pauseCount&&void 0!==t.sumOfSquaredFramesDuration&&void 0!==t.totalFramesDuration&&void 0!==t.totalFreezesDuration&&void 0!==t.totalPausesDuration}return!0}(e)}t&&console.error("After "+e.type,a)}})),o||(a=!1),t&&console.error("Webkit detection result is:",a),a}(e,false)?n:l(e,false)?r:i}let k=i;async function y(){performance.mark("voximplant_statistics_collectStats"),async function(){const e=navigator.getBattery;if(e){const t=await e();if(!t.charging)return t.level&&t.level<=.3?1e4:3e3}return 1e3}().then((e=>{f=e}));let t=0;for(const a of u.values())if("connected"===a.connectionState){t++;const o=await a.getStats(),i=b(o);i.name!==k.name&&(e.log(`Stats strategy changed from ${k.name} to ${i.name}`,{logLevel:"verbose"}),k=i);const s=k.process(o,p.get(a));p.set(a,JSON.parse(JSON.stringify(s)))}performance.measure("voximplant_statistics_collectStats_measure","voximplant_statistics_collectStats");const a=performance.getEntriesByName("voximplant_statistics_collectStats_measure");e.log(`Collected stats for ${t} of ${u.size}. Time: ${a[0].duration}`,{logLevel:"verbose"}),performance.clearMarks("voximplant_statistics_collectStats"),performance.clearMeasures("voximplant_statistics_collectStats_measure")}function g(t,a){e.log("Add a new statistic source",{logLevel:"verbose"}),a.addEventListener("abort",(function(){e.log("Abort statistic source",{logLevel:"verbose"}),function(t){u.delete(t),e.log("Statics source was removed ",{logLevel:"verbose"}),0===u.size&&(e.log("Statics interval was stopped",{logLevel:"verbose"}),v=!1)}(t)})),function(t){u.add(t),e.log("Statics source was added ",{logLevel:"verbose"}),v||setTimeout(y,f)}(t)}export{o as StatisticsLoader,g as registerSource};
//# sourceMappingURL=statistics.esm.min.js.map
